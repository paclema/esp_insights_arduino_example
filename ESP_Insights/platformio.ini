; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; default_envs = esp32
default_envs = esp32_debug


[env:esp32]
; platform = espressif32
platform = https://github.com/platformio/platform-espressif32.git
; platform = https://github.com/paclema/platform-espressif32.git#fix_elf_sha256
board = m5stack-fire
framework = arduino

platform_packages =
    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32#master

; platform_packages =
;   espressif/toolchain-xtensa-esp32 @ 8.4.0+2021r1
;   toolchain-xtensa-esp32 @ 8.4.0+2021r1
;   toolchain-xtensa32@2.80400
;   framework-arduinoespressif32 @ https://github.com/paclema/arduino-esp32#esp_insights

monitor_speed = 115200
upload_speed = 921600
upload_port = COM5
monitor_port = COM5
monitor_filters = esp32_exception_decoder

board_build.partitions = ./board_partitions/esp32/default_16MB_littleFS_large_app_insights.csv
board_build.filesystem = littlefs

build_type = debug
build_flags =
  -w 
  ; -Wl,-Map,output.map       ; To generate a .MAP file

  -D BOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue

  ; -D ARDUINO_LOOP_STACK_SIZE=16384 ; Default 8192
  
  -D CORE_DEBUG_LEVEL=5
  -D CONFIG_ARDUHAL_LOG_COLORS=1
  ; -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG

  ; -D USE_ESP_IDF_LOG
  ; -D TAG="\"ARDUINO\""



; ESP-Insight Firmware data configurations for the scripts:
custom_prog_name = FirmwareNameTest
custom_prog_version = 1.2.3
custom_appinfos_patch_builder = false

extra_scripts =
    ./scripts/custom_pio_tasks.py

    ;; Modify the filename of output elf/bin program binaries,
    ;; from `firmare.elf/bin` --> `<project-name>-<project-version>.elf/bin`
    pre:./scripts/progname.py

    ; Write project name/version & build-date
    ;; at the beggining of the firmware-image
    ;; for OTA code to know what is loaded in each partition.
    ;; NOTE: doing this otherwise would require recompiling esp_idf booloader.
    post:./scripts/patchappinfos.py

    ; Create a zip file ready to upload to ESP-Insights platform
    post:./scripts/pack_firmware.py


[env:esp32_debug]
; platform = espressif32
; platform = https://github.com/platformio/platform-espressif32.git
platform = https://github.com/paclema/platform-espressif32.git#fix_elf_sha256
board = m5stack-fire
framework = arduino

platform_packages =
    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32#master
    tool-openocd-esp32

; platform_packages =
;   espressif/toolchain-xtensa-esp32 @ 8.4.0+2021r1
;   toolchain-xtensa-esp32 @ 8.4.0+2021r1
;   toolchain-xtensa32@2.80400
;   framework-arduinoespressif32 @ https://github.com/paclema/arduino-esp32#esp_insights

monitor_speed = 115200
upload_speed = 921600
upload_port = COM5
monitor_port = COM5
monitor_filters = esp32_exception_decoder

board_build.partitions = ./board_partitions/esp32/default_16MB_littleFS_large_app_insights.csv
board_build.filesystem = littlefs

; board_build.f_flash = 80000000L
; board_build.f_cpu = 240000000L
; board_build.flash_mode = qio

build_type = debug
build_flags =
  -w 
  ; -Wl,-Map,output.map       ; To generate a .MAP file

  -D BOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue

  ; -D ARDUINO_LOOP_STACK_SIZE=16384 ; Default 8192
  
  -D CORE_DEBUG_LEVEL=5
  -D CONFIG_ARDUHAL_LOG_COLORS=1
  ; -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG

  ; -D USE_ESP_IDF_LOG
  ; -D TAG="\"ARDUINO\""



; ESP-Insight Firmware data configurations for the scripts:
custom_prog_name = FirmwareNameTest
custom_prog_version = 1.2.3
custom_appinfos_patch_builder = false

extra_scripts =
    ./scripts/custom_pio_tasks.py

    ;; Modify the filename of output elf/bin program binaries,
    ;; from `firmare.elf/bin` --> `<project-name>-<project-version>.elf/bin`
    pre:./scripts/progname.py

    ; Write project name/version & build-date
    ;; at the beggining of the firmware-image
    ;; for OTA code to know what is loaded in each partition.
    ;; NOTE: doing this otherwise would require recompiling esp_idf booloader.
    post:./scripts/patchappinfos.py

    ; Create a zip file ready to upload to ESP-Insights platform
    post:./scripts/pack_firmware.py

debug_tool = esp-prog
; upload_protocol = esp-prog
; debug_speed = 12000
# debug_init_break = tbreak setup
debug_init_break = tbreak loop
; debug_init_cmds =
;   init;
;   halt
;   esp appimage_offset 0x10000